{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GLENDA\\\\Desktop\\\\cursos\\\\Certifield tech developer\\\\Front3\\\\fe3-final-main\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState, useContext } from \"react\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const Context = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(res => res.json()).then(data => providerState.setData(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: providerState,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Context, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = Context;\n\nvar _c;\n\n$RefreshReg$(_c, \"Context\");","map":{"version":3,"names":["createContext","useEffect","useState","useContext","useReducer","ContextGlobal","undefined","Context","children","state","dispatch","reducer","initialState","fetch","then","res","json","data","providerState","setData"],"sources":["C:/Users/GLENDA/Desktop/cursos/Certifield tech developer/Front3/fe3-final-main/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useEffect, useState, useContext} from \"react\";\nimport { useReducer } from \"react\";\n\n\nexport const ContextGlobal = createContext(undefined);\n\n\nexport const Context = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n \n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => providerState.setData(data));\n  }, []);\n\n  return (\n    <ContextGlobal.Provider value={providerState}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,UAA7C,QAA8D,OAA9D;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAGA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAACM,SAAD,CAAnC;AAGP,OAAO,MAAMC,OAAO,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACvC;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,UAAU,CAACO,OAAD,EAAUC,YAAV,CAApC;EAEAX,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUC,aAAa,CAACC,OAAd,CAAsBF,IAAtB,CAFlB;EAGD,CAJQ,EAIN,EAJM,CAAT;EAMA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEC,aAA/B;IAAA,UACGV;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAhBM;;GAAMD,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}